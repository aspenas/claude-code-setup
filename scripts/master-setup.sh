#!/bin/bash
# Master Setup Script for Jonathon's Claude Code Environment
# Author: Patrick Smith (patrick@candlefish.ai)
# Date: January 2025
# Version: 1.0
# Documentation: https://docs.candlefish.ai/claude-setup

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SETUP_DIR="$HOME/jonathon-claude-setup"
LOG_FILE="$SETUP_DIR/setup.log"
CLAUDE_VERSION="latest"
NODE_VERSION="20"

# Functions
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check macOS
    if [[ "$OSTYPE" != "darwin"* ]]; then
        error "This script is designed for macOS only"
    fi
    
    # Check for Homebrew
    if ! command -v brew &> /dev/null; then
        warning "Homebrew not found. Installing..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Create setup directory
    mkdir -p "$SETUP_DIR"
    touch "$LOG_FILE"
}

print_banner() {
    clear
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║        Jonathon's Claude Code Environment Setup              ║"
    echo "║                 by Candlefish AI                             ║"
    echo "║                                                              ║"
    echo "║  This script will set up a complete Claude Code environment  ║"
    echo "║  including AWS, development tools, and project templates     ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo
}

main_menu() {
    echo "Select components to install:"
    echo "1) Full Installation (Recommended)"
    echo "2) Core Tools Only"
    echo "3) AWS Setup Only"
    echo "4) Claude Code Only"
    echo "5) Development Environment Only"
    echo "6) Exit"
    
    read -p "Enter your choice (1-6): " choice
    
    case $choice in
        1) full_installation ;;
        2) install_core_tools ;;
        3) setup_aws ;;
        4) install_claude_code ;;
        5) setup_dev_environment ;;
        6) exit 0 ;;
        *) warning "Invalid choice. Please try again." && main_menu ;;
    esac
}

full_installation() {
    log "Starting full installation..."
    
    install_core_tools
    install_claude_code
    setup_aws
    setup_dev_environment
    setup_project_templates
    configure_shell
    
    log "Full installation completed!"
    print_next_steps
}

install_core_tools() {
    log "Installing core tools..."
    
    # Install essential tools via Homebrew
    local tools=(
        "git"
        "curl"
        "wget"
        "jq"
        "ripgrep"
        "fd"
        "bat"
        "eza"
        "gh"
        "httpie"
        "tree"
        "tmux"
        "direnv"
    )
    
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log "Installing $tool..."
            brew install "$tool"
        else
            info "$tool already installed"
        fi
    done
    
    # Install Node.js via nvm
    if ! command -v nvm &> /dev/null; then
        log "Installing nvm..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    fi
    
    log "Installing Node.js $NODE_VERSION..."
    nvm install "$NODE_VERSION"
    nvm use "$NODE_VERSION"
    nvm alias default "$NODE_VERSION"
    
    # Install global npm packages
    npm install -g pnpm typescript tsx nodemon pm2
}

install_claude_code() {
    log "Installing Claude Code..."
    
    # Create Claude directory structure
    mkdir -p "$HOME/.claude"/{bin,config,projects,sessions,metrics,commands}
    
    # Install Claude Code
    log "Installing Claude Code package..."
    npm install -g @anthropic-ai/claude-code@$CLAUDE_VERSION
    
    # Create configuration
    cat > "$HOME/.claude/config.yml" << 'EOF'
# Claude Code Configuration
# Auto-generated by Candlefish AI setup

defaultModel: claude-opus-4-20250514
defaultContext: 100000
maximumContext: 200000

# Access permissions
webAccessUnrestricted: true
fileSystemAccessUnrestricted: true
allowUnmentionedDomains: true
allowUnmentionedPaths: true

# Tool permissions
allowedTools:
  - "Bash(git *)"
  - "Bash(python3 *)"
  - "Bash(pip *)"
  - "Bash(npm *)"
  - "Bash(pnpm *)"
  - "Bash(curl *)"
  - "Bash(wget *)"
  - "Bash(httpie *)"
  - "Bash(aws *)"
  - "Bash(docker *)"

# Project settings
projectRoot: "$HOME/projects"
autoTrust: true

# Performance
enableCaching: true
parallelToolCalls: true

# Logging
logLevel: info
metricsEnabled: true
EOF
    
    # Create wrapper scripts
    create_claude_wrappers
    
    log "Claude Code installation completed"
}

create_claude_wrappers() {
    log "Creating Claude wrapper scripts..."
    
    local scripts_dir="$HOME/.claude/bin"
    
    # Main claude wrapper
    cat > "$scripts_dir/claude" << 'EOF'
#!/bin/bash
# Claude Code wrapper with enhanced features

# Default to Opus 4 model
export CLAUDE_DEFAULT_MODEL="claude-opus-4-20250514"

# Load API keys if available
if [ -f "$HOME/.claude/api-keys.env" ]; then
    source "$HOME/.claude/api-keys.env"
fi

# Execute Claude Code with enhanced options
exec claude-code "$@"
EOF
    
    # Claude with max context
    cat > "$scripts_dir/claude-max" << 'EOF'
#!/bin/bash
# Claude with maximum context window

exec claude-code --context 200k "$@"
EOF
    
    # Claude with thinking mode
    cat > "$scripts_dir/claude-think" << 'EOF'
#!/bin/bash
# Claude with step-by-step thinking

exec claude-code --thinking "$@"
EOF
    
    # Make scripts executable
    chmod +x "$scripts_dir"/*
    
    # Add to PATH
    echo "export PATH=\"\$HOME/.claude/bin:\$PATH\"" >> "$HOME/.zshrc"
}

setup_aws() {
    log "Setting up AWS..."
    
    # Install AWS CLI
    if ! command -v aws &> /dev/null; then
        log "Installing AWS CLI..."
        brew install awscli
    fi
    
    # Install AWS tools
    brew install aws-vault aws-sam-cli
    
    # Create AWS configuration script
    cat > "$SETUP_DIR/setup-aws.sh" << 'EOF'
#!/bin/bash
# AWS Setup Script for Jonathon

echo "AWS Account Setup"
echo "================="
echo
echo "This script will help you set up your AWS account"
echo

# Get AWS credentials
read -p "Enter your AWS Access Key ID: " aws_access_key
read -s -p "Enter your AWS Secret Access Key: " aws_secret_key
echo
read -p "Enter your preferred AWS region (e.g., us-east-1): " aws_region

# Configure AWS CLI
aws configure set aws_access_key_id "$aws_access_key"
aws configure set aws_secret_access_key "$aws_secret_key"
aws configure set default.region "$aws_region"
aws configure set default.output "json"

# Create essential resources
echo "Creating essential AWS resources..."

# Create S3 bucket for project files
bucket_name="jonathon-$(date +%s)"
aws s3 mb "s3://$bucket_name" --region "$aws_region"

# Create Secrets Manager entries for API keys
cat > /tmp/api-keys.json << EOJ
{
  "ANTHROPIC_API_KEY": "your-anthropic-key-here",
  "OPENAI_API_KEY": "your-openai-key-here",
  "GITHUB_TOKEN": "your-github-token-here"
}
EOJ

aws secretsmanager create-secret \
    --name "jonathon/api-keys" \
    --description "API keys for Jonathon's projects" \
    --secret-string file:///tmp/api-keys.json \
    --region "$aws_region"

rm /tmp/api-keys.json

echo "AWS setup completed!"
echo "S3 Bucket: $bucket_name"
echo "Secrets: jonathon/api-keys"
EOF
    
    chmod +x "$SETUP_DIR/setup-aws.sh"
    
    info "AWS setup script created at: $SETUP_DIR/setup-aws.sh"
    read -p "Run AWS setup now? (y/n): " run_aws
    if [[ "$run_aws" == "y" ]]; then
        "$SETUP_DIR/setup-aws.sh"
    fi
}

setup_dev_environment() {
    log "Setting up development environment..."
    
    # Install VS Code
    if ! command -v code &> /dev/null; then
        log "Installing VS Code..."
        brew install --cask visual-studio-code
    fi
    
    # Install VS Code extensions
    local extensions=(
        "ms-python.python"
        "dbaeumer.vscode-eslint"
        "esbenp.prettier-vscode"
        "GitHub.copilot"
        "GitHub.copilot-chat"
        "ms-vscode.typescript-language-features"
        "bradlc.vscode-tailwindcss"
        "prisma.prisma"
        "GraphQL.vscode-graphql"
        "amazonwebservices.aws-toolkit-vscode"
    )
    
    for ext in "${extensions[@]}"; do
        log "Installing VS Code extension: $ext"
        code --install-extension "$ext"
    done
    
    # Install development tools
    brew install postgresql redis nginx
    brew install --cask docker postman tableplus
    
    # Install Python tools
    pip3 install --upgrade pip
    pip3 install poetry black ruff pytest ipython jupyter
    
    # Install database clients
    npm install -g prisma @prisma/client
}

setup_project_templates() {
    log "Setting up project templates..."
    
    local templates_dir="$HOME/.claude/templates"
    mkdir -p "$templates_dir"
    
    # Create Next.js project template
    cat > "$templates_dir/nextjs-template.sh" << 'EOF'
#!/bin/bash
# Create a new Next.js project with Candlefish AI standards

project_name="$1"
if [ -z "$project_name" ]; then
    read -p "Enter project name: " project_name
fi

# Create project
pnpm create next-app@latest "$project_name" \
    --typescript \
    --tailwind \
    --eslint \
    --app \
    --no-src-dir \
    --import-alias "@/*"

cd "$project_name"

# Install additional dependencies
pnpm add @anthropic-ai/sdk openai zod prisma @prisma/client
pnpm add -D @types/node prettier eslint-config-prettier

# Create project structure
mkdir -p {services,lib,components,hooks,utils,types}

# Initialize Prisma
pnpm prisma init

# Create environment file
cat > .env.local << EOE
# API Keys
ANTHROPIC_API_KEY=
OPENAI_API_KEY=

# Database
DATABASE_URL="postgresql://user:password@localhost:5432/dbname"

# NextAuth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=$(openssl rand -base64 32)
EOE

echo "Project $project_name created successfully!"
EOF
    
    chmod +x "$templates_dir"/*.sh
}

configure_shell() {
    log "Configuring shell environment..."
    
    # Create shell configuration
    cat >> "$HOME/.zshrc" << 'EOF'

# Jonathon's Claude Code Configuration
export CLAUDE_HOME="$HOME/.claude"
export PATH="$CLAUDE_HOME/bin:$PATH"

# Aliases
alias c='claude'
alias cmax='claude-max'
alias cthink='claude-think'

# Functions
claude-project() {
    local project_name="$1"
    if [ -z "$project_name" ]; then
        echo "Usage: claude-project <project-name>"
        return 1
    fi
    
    cd "$HOME/projects/$project_name" && claude
}

# Auto-load direnv
eval "$(direnv hook zsh)"

# Load NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
EOF
    
    source "$HOME/.zshrc"
}

print_next_steps() {
    echo
    echo -e "${GREEN}Setup completed successfully!${NC}"
    echo
    echo "Next steps:"
    echo "1. Restart your terminal or run: source ~/.zshrc"
    echo "2. Set up your API keys:"
    echo "   - Anthropic: https://console.anthropic.com/api-keys"
    echo "   - OpenAI: https://platform.openai.com/api-keys"
    echo "3. Run 'claude' to start using Claude Code"
    echo "4. Check the guides in: ~/candlefish-ai/projects/jonathon/docs/"
    echo
    echo "Quick commands:"
    echo "  c            - Start Claude Code"
    echo "  cmax         - Claude with max context"
    echo "  cthink       - Claude with thinking mode"
    echo
}

# Main execution
check_prerequisites
print_banner
main_menu